version: 2.1
executors:
  build-agent:
    docker:
      - image: gcr.io/spring-boot-e2e/java-build-agent:latest
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
commands:
  setup_gcp:
    steps:
      - run: echo ${GCLOUD_SERVICE_KEY} > gcr_credentials.json
      - run: gcloud auth activate-service-account --key-file=gcr_credentials.json
      - run: gcloud config set project ${GCR_PROJECT_ID}
  docker_build:
    steps:
      - run: docker build -t $(gradle applicationName):${git rev-parse --short HEAD} .
      - run: docker tag $(gradle applicationName):$(git rev-parse --short HEAD) gcr.io/${IMAGE_SOURCE}/$(gradle applicationName):$(git rev-parse --short HEAD)
  build_set_cluster:
    steps:
      - run: gcloud container clusters create spring-boot-e2e-cluster --num-nodes=2 --region=${GCR_SERVICE_REGION}
      - run: gcloud config set container/cluster spring-boot-e2e-cluster
  deploy_cluster:
    steps:
      - run: kubectl run demo --image=gcr.io/${GCR_PROJECT_ID}/spring-boot-e2e:v1 --port 8080
      - run: kubectl get pods
      - run: kubectl expose deployment demo --type=LoadBalancer --port 80 --target-port 8080
      - run: kubectl get service
  scale:
    steps:
      - run: kubectl scale deployment demo --replicas=3
      - run: kubectl get pods
jobs:
  build:
    executor: build-agent
    steps:
      - checkout
  build_image:
    executor: build-agent
    steps:
      - setup_gcp
      - run: gcloud auth configure-docker
      - docker_build
      - run: docker push gcr.io/${GCR_PROJECT_ID}/$(gradle applicationName):$(git rev-parse --short HEAD)
  deploy_dev:
    executor: build-agent
    steps:
      - attach_workspace:
          at: .
      - setup_gcp
      - deploy
workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build:
          context: development
